#ifndef C_NEURO_NET_H
#define C_NEURO_NET_H

//****************************************************************************************************
//Класс нейросети
//****************************************************************************************************

//слой 0 - входной, последний слой - выходной

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <vector>
#include "cmatrix.h"
#include "cvector.h"

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//Класс нейросети
//****************************************************************************************************
class CNeuroNet
{
 public:
  //-перечисления---------------------------------------------------------------------------------------
  std::vector<size_t> NeuronInLayers;//количество нейронов в слоях
  std::vector<CMatrix> cMatrix_W;//веса
  std::vector<CMatrix> cMatrix_dW;//изменения весов
  std::vector<CVector> cVector_B;//сдвиги
  std::vector<CVector> cVector_dB;//поправки к сдвигам
  std::vector<CVector> cVector_H;//значение после активационной функции
  std::vector<CVector> cVector_Z;//значение до активационной функции
  std::vector<CVector> cVector_Delta;//ошибки слоёв
  CVector cVector_Error;//вектор ошибки  
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
 private:
  //-переменные-----------------------------------------------------------------------------------------
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CNeuroNet(void);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CNeuroNet();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  void Create(const std::vector<size_t> &neuron_in_layers);//создать нейросеть
  void Reset(void);//привести нейросеть в исходное состояние
  double Training(const std::vector<std::pair<CVector,CVector>> &image,double speed,double max_cost,size_t max_iteration);//обучить нейросеть
  void GetAnswer(const CVector &input,CVector &output);//вычислить результат работы нейросети
 private:
  //-закрытые функции-----------------------------------------------------------------------------------  
  double GetRandValue(double max_value);//случайное число
  double NeuronFunction(double value);//функция активации нейрона
  double NeuronFunctionDifferencial(double value);//производная функции активации нейрона
};

#endif