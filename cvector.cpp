//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "cvector.h"
#include <math.h>

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************
static const double CVECTOR_EPS=0.0000000001;

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CVector::CVector(size_t size)
{
 Size=size;
 Item.resize(Size);
}
//----------------------------------------------------------------------------------------------------
//конструктор коипирования
//----------------------------------------------------------------------------------------------------
CVector::CVector(const CVector &cVector)
{
 if (&cVector==this) return;
 Size=cVector.Size;
 Item=cVector.Item;
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CVector::~CVector()
{
 Size=0;
 Item.clear();
}
//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//получить размер вектора
//----------------------------------------------------------------------------------------------------
size_t CVector::GetSize(void) const
{
 return(Size);
}
//----------------------------------------------------------------------------------------------------
//нормировка вектора
//----------------------------------------------------------------------------------------------------
void CVector::Normalize(void)
{
 double norma=GetNorma();
 if (norma<CVECTOR_EPS) return;
 for(size_t n=0;n<Size;n++) Item[n]/=norma;
}
//----------------------------------------------------------------------------------------------------
//получить норму вектора
//----------------------------------------------------------------------------------------------------
double CVector::GetNorma(void) const
{
 double norma=0;
 for(size_t n=0;n<Size;n++) norma+=Item[n]*Item[n];
 norma=sqrt(norma);
 return(norma);
}
//----------------------------------------------------------------------------------------------------
//получить элемент вектора
//----------------------------------------------------------------------------------------------------
 
double CVector::GetElement(size_t index) const
{
 if (index>=Size) return(0);
 return(Item[index]);
}
//----------------------------------------------------------------------------------------------------
//задать элемент вектора
//----------------------------------------------------------------------------------------------------
 
void CVector::SetElement(size_t index,double value)
{
 if (index>=Size) return;
 Item[index]=value;
}
//----------------------------------------------------------------------------------------------------
//задать одномерный вектор
//----------------------------------------------------------------------------------------------------
 
void CVector::Set(double x)
{
 if (Size<1) return;
 Item[0]=x;
}
//----------------------------------------------------------------------------------------------------
//задать двухмерный вектор
//----------------------------------------------------------------------------------------------------
 
void CVector::Set(double x,double y)
{
 if (Size<2) return;
 Item[0]=x;
 Item[1]=y;
}
//----------------------------------------------------------------------------------------------------
//задать трёхмерный вектор
//----------------------------------------------------------------------------------------------------
 
void CVector::Set(double x,double y,double z)
{
 if (Size<3) return;
 Item[0]=x;
 Item[1]=y;
 Item[2]=z;
}
//----------------------------------------------------------------------------------------------------
//задать четырёхмерный вектор
//----------------------------------------------------------------------------------------------------
 
void CVector::Set(double x,double y,double z,double a)
{
 if (Size<4) return;
 Item[0]=x;
 Item[1]=y;
 Item[2]=z;
 Item[3]=a;
}
//----------------------------------------------------------------------------------------------------
//обнулить вектор
//----------------------------------------------------------------------------------------------------
 
void CVector::Zero(void)
{
 for(size_t n=0;n<Size;n++) Item[n]=0;
}
 
//----------------------------------------------------------------------------------------------------
//оператор "="
//----------------------------------------------------------------------------------------------------
 
CVector& CVector::operator=(const CVector &cVector)
{
 if (this!=&cVector)
 {
  Size=cVector.Size;
  Item=cVector.Item;
 }
 return(*this);
}
 
//----------------------------------------------------------------------------------------------------
//оператор "+"
//----------------------------------------------------------------------------------------------------
 
CVector operator+(const CVector& cVector_Left,const CVector& cVector_Right)
{
 CVector cVector(cVector_Left.Size);
 if (cVector_Left.Size!=cVector_Right.Size)
 {
  throw "Ошибка оператора '+'! Размерности векторов не совпадают!";
  return(cVector);
 }
 for(size_t n=0;n<cVector_Left.Size;n++)
 {
  cVector.Item[n]=cVector_Left.Item[n]+cVector_Right.Item[n];
 }
 return(cVector);
}
//----------------------------------------------------------------------------------------------------
//оператор "-"
//----------------------------------------------------------------------------------------------------
 
CVector operator-(const CVector& cVector_Left,const CVector& cVector_Right)
{
 CVector cVector(cVector_Left.Size);
 if (cVector_Left.Size!=cVector_Right.Size)
 {
  throw "Ошибка оператора '-'! Размерности векторов не совпадают!";
  return(cVector);
 }
 for(size_t n=0;n<cVector_Left.Size;n++)
 {
  cVector.Item[n]=cVector_Left.Item[n]-cVector_Right.Item[n];
 }
 return(cVector);
}
//----------------------------------------------------------------------------------------------------
//оператор "*" (скалярное произведение)
//----------------------------------------------------------------------------------------------------
 
double operator*(const CVector& cVector_Left,const CVector& cVector_Right)
{
 if (cVector_Left.Size!=cVector_Right.Size)
 {
  throw "Ошибка оператора '-'! Размерности векторов не совпадают!";
  return(0);
 }
 double ret=0;
 for(size_t n=0;n<cVector_Left.Size;n++)
 {
  ret+=cVector_Left.Item[n]*cVector_Right.Item[n];
 }
 return(ret);
}
//----------------------------------------------------------------------------------------------------
//оператор "^" (векторное произведение)
//----------------------------------------------------------------------------------------------------
 
CVector operator^(const CVector& cVector_Left,const CVector& cVector_Right)
{
 if (cVector_Left.Size==3 && cVector_Right.Size==3)//только для векторов размерности 3
 {
  CVector cVector(cVector_Left.Size);
  cVector.Item[0]=cVector_Left.Item[1]*cVector_Right.Item[2]-cVector_Right.Item[1]*cVector_Left.Item[2];
  cVector.Item[1]=-(cVector_Left.Item[0]*cVector_Right.Item[2]-cVector_Right.Item[0]*cVector_Left.Item[2]);
  cVector.Item[2]=cVector_Left.Item[0]*cVector_Right.Item[1]-cVector_Right.Item[0]*cVector_Left.Item[1];
  return(cVector);
 }
 throw "Ошибка! Не определено векторное произведение векторов размерности отличной от 3.";
 return(cVector_Left);
}
//----------------------------------------------------------------------------------------------------
//оператор "*"
//----------------------------------------------------------------------------------------------------
 
CVector operator*(const CVector& cVector_Left,const double &value_right)
{
 CVector cVector(cVector_Left.Size);
 for(size_t n=0;n<cVector_Left.Size;n++)
 {
  cVector.Item[n]=cVector_Left.Item[n]*value_right;
 }
 return(cVector);
}
//----------------------------------------------------------------------------------------------------
//оператор "*"
//----------------------------------------------------------------------------------------------------
 
CVector operator*(const double &value_left,const CVector& cVector_Right)
{
 CVector cVector(cVector_Right.Size);
 for(size_t n=0;n<cVector_Right.Size;n++)
 {
  cVector.Item[n]=cVector_Right.Item[n]*value_left;
 }
 return(cVector);
}
//----------------------------------------------------------------------------------------------------
//оператор "/"
//----------------------------------------------------------------------------------------------------
 
CVector operator/(const CVector& cVector_Left,const double &value_right)
{
 CVector cVector(cVector_Left.Size);
 for(size_t n=0;n<cVector_Left.Size;n++)
 {
  cVector.Item[n]=cVector_Left.Item[n]/value_right;
 }
 return(cVector);
}



 

 

 

 
 
 
