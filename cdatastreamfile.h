#ifndef C_DATA_STREAM_FILE_H
#define C_DATA_STREAM_FILE_H

//****************************************************************************************************
//класс потока ввода-вывода в файл
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <string>
#include <memory>
#include <fstream>

#include "idatastream.h"

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//класс потока ввода-вывода в файл
//****************************************************************************************************
class CDataStreamFile:public IDataStream
{
 public:
  //-перечисления---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
 private:
  //-переменные-----------------------------------------------------------------------------------------
  std::ofstream StreamOut;
  std::ifstream StreamIn;
  bool Fail;//результат операции
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CDataStreamFile(std::string file_name,bool write=false);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CDataStreamFile();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  int8_t LoadInt8(void);//загрузка числа типа int8_t
  int16_t LoadInt16(void);//загрузка числа типа int16_t
  int32_t LoadInt32(void);//загрузка числа типа int32_t

  uint8_t LoadUInt8(void);//загрузка числа типа uint8_t
  uint16_t LoadUInt16(void);//загрузка числа типа uint16_t
  uint32_t LoadUInt32(void);//загрузка числа типа uint32_t

  float LoadFloat(void);//загрузка числа типа float
  double LoadDouble(void);//загрузка числа типа double

  void SaveInt8(int8_t value);//запись числа типа int8_t
  void SaveInt16(int16_t value);//запись числа типа int16_t
  void SaveInt32(int32_t value);//запись числа типа int32_t

  void SaveUInt8(int8_t value);//запись числа типа uint8_t
  void SaveUInt16(int16_t value);//запись числа типа uint16_t
  void SaveUInt32(int32_t value);//запись числа типа uint32_t

  void SaveFloat(float value);//запись числа типа float
  void SaveDouble(double value);//запись числа типа double

  bool IsFail(void) const;//получить, была ли ошибка
 private:
  //-закрытые функции-----------------------------------------------------------------------------------  
  template<class Type>
  Type Load(void)
  {
   Type t;	    
   Fail=StreamIn.read(reinterpret_cast<char*>(&t),sizeof(Type)*sizeof(char)).fail();
   return(t);
  }

  template<class Type>
  void Save(Type t)
  {
   Fail=StreamOut.write(reinterpret_cast<char*>(&t),sizeof(Type)*sizeof(char)).fail();
  }
};

#endif