#ifndef C_NEURO_NET_TRAINER_H
#define C_NEURO_NET_TRAINER_H

//****************************************************************************************************
// ласс обучени€ нейросети
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <vector>
#include <string>
#include "cmatrix.h"
#include "cvector.h"
#include "idatastream.h"
#include "cneuronet.h"

//****************************************************************************************************
//макроопределени€
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объ€влени€
//****************************************************************************************************

//****************************************************************************************************
// ласс обучени€ нейросети
//****************************************************************************************************
class CNeuroNetTrainer
{
 public:
  //-перечислени€---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
 private:
  //-переменные-----------------------------------------------------------------------------------------
  std::shared_ptr<CNeuroNet> cNeuroNet_Ptr;//указатель на класс обучаемой нейросети

  std::vector<CMatrix> cMatrix_dW;//изменени€ весов
  std::vector<CVector> cVector_dB;//поправки к сдвигам
  std::vector<CVector> cVector_Delta;//ошибки слоЄв
  CVector cVector_Error;//вектор ошибки  

  //вспомогательные матрицы и вектора
  std::vector<CMatrix> cMatrix_TmpW;
  std::vector<CMatrix> cMatrix_TmpDelta;
  std::vector<CMatrix> cMatrix_Tmp;
  std::vector<CVector> cVector_Tmp;  
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CNeuroNetTrainer(void);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CNeuroNetTrainer();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  void Connect(std::shared_ptr<CNeuroNet> cNeuroNet_Ptr_Set);//подключитьс€ к нейросети
  double Training(const std::vector<std::pair<CVector,CVector>> &image,double speed,double max_cost,size_t max_iteration);//обучить нейросеть
 private:
  //-закрытые функции-----------------------------------------------------------------------------------  
};

#endif
